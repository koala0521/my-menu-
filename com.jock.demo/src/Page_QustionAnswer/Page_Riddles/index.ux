<import name="qustion_and_answer" src="../../component/c_qustionAndAnswer.ux"></import>
<import name="loading" src="../../component/loading.ux" src=""></import>
 
<!--  谜语大全  -->
<template>
	<div class="wrap">
		<div class="catgary-wrap">
			<!-- 谜语分类 -->
			<list class="catgary-list">
				<block for="typeList">
					<list-item type="catgary" @click="selectRiddles($item)">
						<text class="item-name {{ activeId == $item.id ? 'active' : '' }}">{{ $item.name }}</text>
					</list-item>
				</block>
			</list>
		</div>
		<list class="riddles-list" id="list" onscrollbottom="scrollbottom" >
			<block for="list">
				<list-item type="item" class="item">
					<qustion_and_answer data="{{ $item }}" btn-text="谜底" answer-text="" ></qustion_and_answer>
				</list-item>
			</block>
			<list-item type="loadStatus" class="load-status" if="{{ hasMoreData }}">
				<progress type="circular"></progress>
				<text show="{{ hasMoreData }}">加载更多...</text>
				<text show="{{ !hasMoreData }}">没有更多了~~</text>
			</list-item>
		</list>
		<loading if="{{ isLoadingData }}"></loading>
	</div>
</template>

<script>
import data from '../data.js';
import util from '../../util.js';
import api from '../../api/api.js';
import prompt from '@system.prompt';

export default {
	data: {
		list: [],
		typeList: [],
		activeId: -1,
		page: 1,
		maxPage: 999,
		pageSize: 20,
		hasMoreData: true,
		isLoadingData: false

	},
	onInit() {
		util.shuffle(data.riddlesCatgary);
		this.typeList = data.riddlesCatgary.filter((el, index) => {
			return index < 8
		})
		this.$on('clk_home_btn_on_tab_1', this.backTop);
		this.getRiddles();


	},
	backTop(evt) {
		util.scrollToTop(this.$element('list'));
		evt.stop();

	},
	selectRiddles(item) {
		console.log(`item >>>>`, item);
		this.isLoadingData = true;
		setTimeout(() => {	
			this.isLoadingData = false;
        }, 500);
        
		this.activeId = item.id;
		this.page = 1;
        this.getRiddles();

	},

	getRiddles(){
		api.getRiddlesById({
			page: this.page,
			typeId: this.activeId
		}).then(res =>{

			if( res.showapi_res_code !== 0 || !res.showapi_res_body || res.showapi_res_body.ret_code != 0 ){
				prompt.showToast({
					message: '请求失败请稍后重试~~'
				})
				return
			}		
			let obj = res.showapi_res_body.pb || {};

			// 格式化数据
			obj.contentlist.forEach( el => {
				el.question = el.title;
				el.icon = '/Common/29.png';
			});

			this.list = this.list.concat( obj.contentlist || []);
			this.maxPage = obj.allPages;

		}).catch(err=>{
			console.log(`请求失败了 >>>>>>>>` , err);
		})
	},

	/* 滑动到底部时加载更多 */
	scrollbottom() {
		this.page++;
		console.log(`this.page >>>>` , this.page);
		if ( this.page >= this.maxPage ){
			this.hasMoreData = false;		
			return
		}
		if (!this.isLoadingData) {
			this.getRiddles();
		}
	},	


}
</script>

<style>
.wrap {
  padding: 0 32px;
  flex-direction: column;
  width: 100%;
}
.catgary-wrap {
  flex-direction: column;
  width: 100%;
  height: 148px;
  justify-content: space-around;
  margin-top: 16px;
}
.catgary-list {
  width: 100%;
  columns: 4;
  /* border-bottom: 1px solid #000; */
}
.item-name {
  color: #000000;
  padding: 8px 16px;
  background-color: #e5e5e2;
  margin: 6px;
  text-align: center;
  border-radius: 16px;
  width: 170px;
}
.item-name:active,
.active {
  color: #ffffff;
  background-color: #ec4d4d;
}

.riddles-list {
  flex-direction: column;
  flex: 1;
}

.item {
  border-bottom: 6px solid #ececec;
  margin: 16px 0;
}
.load-status {
  justify-content: center;
  align-items: center;
  height: 80px;
}
</style>
