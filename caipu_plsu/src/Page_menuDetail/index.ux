<import name="no_content" src="../Main/component/no_content.ux"></import>
<import name="end_line" src="../Main/component/end_line.ux"></import>
<import name="loading" src="../Main/component/loading.ux"></import>
 
<template>
	<div class="menu-detail-page">
		<loading if="showLoading"></loading>
		<div class="menu-detail-info" if="detailInfo && detailInfo.id">
			<div class="menu-img-wrap">
				<image class="menu-img" src="{{ detailInfo.pic }}"></image>
			</div>

			<div class="menu-content-wrap">
				<div class="menu-title-wrap">
					<text class="menu-title">{{ detailInfo.name }}</text>
					<text class="menu-info-count">{{ detailInfo.viewsCount }}万人浏览 {{ detailInfo.favoritesCount }}万人收藏</text>
				</div>
				<text class="menu-desc">{{ detailInfo.content }}</text>

				<div class="menu-material">
					<div class="menu-material-title-wrap">
						<text class="menu-material-title">用料</text>
					</div>
					<div for="detailInfo.material" class="menu-material-item">
						<text class="menu-material-name">{{ $item.mname }}</text>
						<text class="menu-material-count">{{ $item.amount }}</text>
					</div>
				</div>
			</div>

			<div class="menu-step">
				<div class="menu-step-list" for="detailInfo.process">
					<text class="menu-step-title">步骤{{ $idx + 1 }}</text>
					<div class="menu-step-content">
						<text class="menu-step-desc">{{ $item.pcontent }}</text>
						<image class="menu-step-img" src="{{ $item.pic }}"></image>
					</div>
				</div>
			</div>
			<end_line text="到底啦~~"></end_line>
		</div>
		<div class="fixed-bottom-tab" if="detailInfo && detailInfo.id">
			<div class="fixed-tab-item" @click="favoriteMenu">
				<!-- <image class="fixed-tab-item-icon" src="./img/start_grey.png"></image> -->
				<text class="fixed-tab-item-text">{{ favoritesState == false ? '收藏' : '已收藏' }}</text>
			</div>
			<div class="fixed-tab-item" @click="creatIcon" show="{{!iconState}}" >
				<!-- <image class="fixed-tab-item-icon" src="./img/start_grey.png"></image> -->
				<text class="fixed-tab-item-text">保存桌面</text>
			</div>
		</div>
		<div class="menu-detail-no-content" if="!detailInfo.id">
			<no_content></no_content>
		</div>
	</div>
</template>

<style>
.menu-detail-page {
  flex-direction: column;
  background-color: #f3f3ef;
  padding-bottom: 160px;
}
.menu-detail-info {
  flex-direction: column;
  width: 100%;
}
.menu-img-wrap {
  width: 100%;
  height: 500px;
}
.menu-img {
  width: 100%;
}
.menu-content-wrap {
  justify-content: flex-start;
  flex-direction: column;
  margin-top: -80px;
  margin: -80px 32px 0 32px;
  /* height: 800px; */
  background-color: #fff;
  border-radius: 16px;
  padding: 0 32px 32px 32px;
}
.menu-title-wrap {
  justify-content: space-between;
  border-bottom: 1px solid #f0ecec;
  padding: 24px 0;
}

.menu-title {
  font-size: 36px;
  line-height: 72px;
  font-weight: bold;
}

.menu-info-count {
  font-size: 24px;
  /* align-self: flex-end; */
}

.menu-desc {
  margin-top: 32px;
  line-height: 36px;
}
.menu-material {
  flex-direction: column;
  margin-top: 32px;
}
.menu-material-title {
  font-size: 28px;
  line-height: 36px;
  font-weight: bold;
  margin-bottom: 16px;
}
.menu-material-item {
  border-bottom: 1px solid #f0ecec;
  padding: 16px 0;
}
.menu-material-count,
.menu-material-name {
  flex: 1;
}

.menu-step {
  /* margin: 32px 32px 0 32px; */
  flex-direction: column;
  padding: 0 32px;
  margin-top: 32px;
}
.menu-step-list,
.menu-step-content {
  flex-direction: column;
}
.menu-step-list {
  padding: 16px 0;
}
.menu-step-title {
  font-size: 32px;
  line-height: 36px;
  font-weight: bold;
  margin-bottom: 16px;
}
.menu-step-img {
  border-radius: 16px;
  width: 90%;
  align-self: center;
}
.menu-step-desc {
  font-size: 30px;
  line-height: 36px;
  padding-bottom: 16px;
}

.fixed-bottom-tab {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 0;
  /* height: 120px; */
  background-color: #f1f1f1;
  border-top: 2px solid #dfdfdf;
  justify-content: space-around;
  align-items: center;
  padding: 32px;
}

.fixed-tab-item {
  width: 300px;
  height: 80px;
  justify-content: center;
  align-items: center;
  background-color: #ff6767;
  border-radius: 16px;
}
.fixed-tab-item-icon {
  width: 40px;
  height: 40px;
  margin-right: 16px;
}
.fixed-tab-item-text {
  font-weight: bold;
  color: #ffffff;
}

.menu-detail-no-content {
  width: 100%;
}
</style>


<script>

import api from '../api/api.js'
import util from '../util.js'
import device from '@system.device'
import prompt from '@system.prompt'


export default {
	public: {
		detailInfo: {
			id: 0,
			content: '',
			material: [],
			name: '',
			process: [],
			pic: '',
			viewsCount: 0, 		// 浏览量
			favoritesCount: 0,	// 收藏量
		},
		showLoading: true,
		favoritesState: false,
		favoritesList: [],	// 收藏列表
		iconState: false
	},
	protected: {
		infos: '',
		id: 0
	},
	/**
	 * 当用户点击菜单按钮时触发，调用app中定义的方法showMenu
	 * 注意：使用加载器测试`创建桌面快捷方式`功能时，请先在`系统设置`中打开`应用加载器`的`桌面快捷方式`权限
	 */
	onMenuPress() {
		this.$app.$def.showMenu()
	},
	onInit() {
		try {
			this.detailInfo = JSON.parse(this.infos);
		} catch (error) { }

		// util.delFile( util.filePath )

		// 
		util.hasIcon().then(res =>{
			console.log(`hasIcon >>>>>>>>` , res);
			this.iconState = res.data;
		})

		// 路由传参，不需要请求
		if (this.detailInfo.id) {
			this.showLoading = false;
			this.updateTitle(this.detailInfo.name);
			this.computedCount();
			this.hasFavorite();
			return
		}

		api.getMenuDetail({
			id: 5
		}).then(data => {
			let menuData = JSON.parse(data);
			this.detailInfo = menuData.result;
			this.detailInfo.content = this.detailInfo.content.replace(/<br \/>/g, '\r\n');
			this.showLoading = false;
			this.updateTitle(this.detailInfo.name);
			this.computedCount();
			this.hasFavorite();
		})

	},
	onReady() {
		// console.log(`infos >>>>>>>>>`, this.infos)
	},
	onShow() {
		// console.log(`this.infos >>>>>>>>>onShow`, this.infos)
	},
	updateTitle(title) {
		this.$page.setTitleBar({
			//titlebar的状态，在manifest.json中display设置的
			text: title || '详情页',
			textColor: '#1A1A1A',
			backgroundColor: 'rgba(255,255,255,0.3)'
		});
	},
	computedCount() {
		let min = Math.min(this.detailInfo.id, this.detailInfo.classid) / 100 / this.detailInfo.tag.length;
		let max = Math.max(this.detailInfo.id, this.detailInfo.classid) / 100 / this.detailInfo.tag.length;
		this.detailInfo.viewsCount = Math.max( Math.round(max * 10) / 10 , 1 );
		this.detailInfo.favoritesCount = Math.max( Math.round(min * 10) / 10 , 0.2);
	},
	creatIcon() {

		util.createShortcut();
	},

	favoriteMenu() {

		device.getDeviceId({
			success: (data)=> {				
			},
			fail: (data, code)=> {
			}
		})	

		if( this.favoritesState ){
			this.unfavorite();
		}else{
			this.favorite();
		}			
	},
	// 检测是否收藏
	hasFavorite() {

		util.readFile(util.filePath).then(res => {

			let text = res.data.text;
			if (!text) return

			this.favoritesList = JSON.parse(text) || [];
			this.favoritesState = this.favoritesList.some(el => {
				return el.id == this.detailInfo.id
			})


		}).catch(err => {
			console.log(` read fail >>>>>>>>>`, err);

		});
	},

	// 收藏
	favorite(){

		this.favoritesList.unshift(this.detailInfo);
		util.writeFile(util.filePath, JSON.stringify(this.favoritesList)).then(res => {
			console.log(`success >>>>>>>>>>>>>>>>>>`, res);
			this.favoritesState = true;
		}).catch(err => {
			console.log(`fail >>>>>>>>>>>>`, err);
		})
	},

	// 取消收藏
	unfavorite(){
		
		util.delFile( util.filePath );

		let arr = this.favoritesList.filter( el =>{
			return el.id != this.detailInfo.id
		})
		this.favoritesState = false;

		util.writeFile( util.filePath, JSON.stringify(arr) ).then(res => {
			console.log(`unfavorite >>>>>>>>>>>>>>>>>>`, res);
		}).catch(err => {
			console.log(`fail >>>>>>>>>>>>`, err);
		})
	}
}
</script>